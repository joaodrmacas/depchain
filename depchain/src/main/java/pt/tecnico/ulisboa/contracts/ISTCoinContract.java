package pt.tecnico.ulisboa.contracts;

import java.util.Map;

import org.hyperledger.besu.datatypes.Address;
import org.hyperledger.besu.evm.fluent.SimpleWorld;
import org.apache.tuweni.bytes.Bytes;
import java.math.BigInteger;

import pt.tecnico.ulisboa.utils.ContractUtils;


public class ISTCoinContract extends Contract {

    public ISTCoinContract(SimpleWorld world, Address owner) {
        super(world,owner);
        //TODO: fill these
        METHOD_SIGNATURES = Map.of(
            "transfer", ContractUtils.getFunctionSelector("transfer(address,uint256)"),
            "transferFrom", ContractUtils.getFunctionSelector("transferFrom(address,address,uint256)"),
            "approve", ContractUtils.getFunctionSelector("approve(address,uint256)"),
            "balanceOf", ContractUtils.getFunctionSelector("balanceOf(address)")
        );
        //TODO: fill these
        setByteCode("608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f80fd5b61009d6101fd565b6040516100aa9190611085565b60405180910390f35b6100cd60048036038101906100c89190611136565b61028d565b6040516100da919061118e565b60405180910390f35b6100eb610452565b6040516100f891906111b6565b60405180910390f35b61011b600480360381019061011691906111cf565b61045b565b604051610128919061118e565b60405180910390f35b6101396106fb565b604051610146919061123a565b60405180910390f35b61016960048036038101906101649190611253565b610703565b60405161017691906111b6565b60405180910390f35b610187610748565b6040516101949190611085565b60405180910390f35b6101b760048036038101906101b29190611136565b6107d8565b6040516101c4919061118e565b60405180910390f35b6101e760048036038101906101e2919061127e565b61099d565b6040516101f491906111b6565b60405180910390f35b60606003805461020c906112e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610238906112e9565b80156102835780601f1061025a57610100808354040283529160200191610283565b820191905f5260205f20905b81548152906001019060200180831161026657829003601f168201915b5050505050905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87336040518263ffffffff1660e01b81526004016102e89190611328565b602060405180830381865afa158015610303573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610327919061136b565b15610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e906113e0565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87846040518263ffffffff1660e01b81526004016103c19190611328565b602060405180830381865afa1580156103dc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610400919061136b565b15610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790611448565b60405180910390fd5b61044a8383610a1f565b905092915050565b5f600254905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87336040518263ffffffff1660e01b81526004016104b69190611328565b602060405180830381865afa1580156104d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104f5919061136b565b15610535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052c906113e0565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87856040518263ffffffff1660e01b815260040161058f9190611328565b602060405180830381865afa1580156105aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ce919061136b565b1561060e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610605906114b0565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87846040518263ffffffff1660e01b81526004016106689190611328565b602060405180830381865afa158015610683573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a7919061136b565b156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de90611518565b60405180910390fd5b6106f2848484610a41565b90509392505050565b5f6002905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b606060048054610757906112e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610783906112e9565b80156107ce5780601f106107a5576101008083540402835291602001916107ce565b820191905f5260205f20905b8154815290600101906020018083116107b157829003601f168201915b5050505050905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87336040518263ffffffff1660e01b81526004016108339190611328565b602060405180830381865afa15801561084e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610872919061136b565b156108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a9906113e0565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87846040518263ffffffff1660e01b815260040161090c9190611328565b602060405180830381865afa158015610927573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061094b919061136b565b1561098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098290611518565b60405180910390fd5b6109958383610a6f565b905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f80610a29610a91565b9050610a36818585610a98565b600191505092915050565b5f80610a4b610a91565b9050610a58858285610aaa565b610a63858585610b3d565b60019150509392505050565b5f80610a79610a91565b9050610a86818585610b3d565b600191505092915050565b5f33905090565b610aa58383836001610c2d565b505050565b5f610ab5848461099d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610b375781811015610b28578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610b1f93929190611536565b60405180910390fd5b610b3684848484035f610c2d565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bad575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610ba49190611328565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c1d575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610c149190611328565b60405180910390fd5b610c28838383610dfc565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c9d575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610c949190611328565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d0d575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610d049190611328565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610df6578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ded91906111b6565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e4c578060025f828254610e409190611598565b92505081905550610f1a565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ed5578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610ecc93929190611536565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f61578060025f8282540392505081905550610fab565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161100891906111b6565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61105782611015565b611061818561101f565b935061107181856020860161102f565b61107a8161103d565b840191505092915050565b5f6020820190508181035f83015261109d818461104d565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6110d2826110a9565b9050919050565b6110e2816110c8565b81146110ec575f80fd5b50565b5f813590506110fd816110d9565b92915050565b5f819050919050565b61111581611103565b811461111f575f80fd5b50565b5f813590506111308161110c565b92915050565b5f806040838503121561114c5761114b6110a5565b5b5f611159858286016110ef565b925050602061116a85828601611122565b9150509250929050565b5f8115159050919050565b61118881611174565b82525050565b5f6020820190506111a15f83018461117f565b92915050565b6111b081611103565b82525050565b5f6020820190506111c95f8301846111a7565b92915050565b5f805f606084860312156111e6576111e56110a5565b5b5f6111f3868287016110ef565b9350506020611204868287016110ef565b925050604061121586828701611122565b9150509250925092565b5f60ff82169050919050565b6112348161121f565b82525050565b5f60208201905061124d5f83018461122b565b92915050565b5f60208284031215611268576112676110a5565b5b5f611275848285016110ef565b91505092915050565b5f8060408385031215611294576112936110a5565b5b5f6112a1858286016110ef565b92505060206112b2858286016110ef565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061130057607f821691505b602082108103611313576113126112bc565b5b50919050565b611322816110c8565b82525050565b5f60208201905061133b5f830184611319565b92915050565b61134a81611174565b8114611354575f80fd5b50565b5f8151905061136581611341565b92915050565b5f602082840312156113805761137f6110a5565b5b5f61138d84828501611357565b91505092915050565b7f53656e64657220697320626c61636b6c697374656400000000000000000000005f82015250565b5f6113ca60158361101f565b91506113d582611396565b602082019050919050565b5f6020820190508181035f8301526113f7816113be565b9050919050565b7f5370656e64657220697320626c61636b6c6973746564000000000000000000005f82015250565b5f61143260168361101f565b915061143d826113fe565b602082019050919050565b5f6020820190508181035f83015261145f81611426565b9050919050565b7f46726f6d206164647265737320697320626c61636b6c697374656400000000005f82015250565b5f61149a601b8361101f565b91506114a582611466565b602082019050919050565b5f6020820190508181035f8301526114c78161148e565b9050919050565b7f526563697069656e7420697320626c61636b6c697374656400000000000000005f82015250565b5f61150260188361101f565b915061150d826114ce565b602082019050919050565b5f6020820190508181035f83015261152f816114f6565b9050919050565b5f6060820190506115495f830186611319565b61155660208301856111a7565b61156360408301846111a7565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6115a282611103565b91506115ad83611103565b92508282019050808211156115c5576115c461156b565b5b9291505056fea264697066735822122002cdf6fe17d848d8aa233570060c51689869365a7ab3370586f13cdc55c2013f64736f6c634300081a0033");
    }

    //TODO: testar
    public void transfer(Address sender, Address recipient, BigInteger amount) {
        String encodedRecipient = ContractUtils.padAddressTo256Bit(recipient.toHexString());
        String encodedAmount = ContractUtils.padBigIntegerTo256Bit(amount);
        
        executor.worldUpdater(world.updater());
        executor.sender(sender);
        executor.callData(Bytes.fromHexString(METHOD_SIGNATURES.get("transfer") + encodedRecipient + encodedAmount));
        executor.execute();
        executor.commitWorldState(); 
    }
    
    //TODO: testar
    public void transferFrom(Address sender, Address from, Address to, BigInteger amount) {
        String encodedFrom = ContractUtils.padAddressTo256Bit(from.toHexString());
        String encodedTo = ContractUtils.padAddressTo256Bit(to.toHexString());
        String encodedAmount = ContractUtils.padBigIntegerTo256Bit(amount);
        
        executor.worldUpdater(world.updater());
        executor.sender(sender);
        executor.callData(Bytes.fromHexString(METHOD_SIGNATURES.get("transferFrom") + encodedFrom + encodedTo + encodedAmount));
        executor.execute();
        executor.commitWorldState();
    }
    
    //TODO: testar
    public void approve(Address sender, Address spender, BigInteger amount) {
        String encodedSpender = ContractUtils.padAddressTo256Bit(spender.toHexString());
        String encodedAmount = ContractUtils.padBigIntegerTo256Bit(amount);
        
        executor.worldUpdater(world.updater());
        executor.sender(sender);
        executor.callData(Bytes.fromHexString(METHOD_SIGNATURES.get("approve") + encodedSpender + encodedAmount));
        executor.execute();
        executor.commitWorldState();
    }

    //TODO: Isto não é necessário ir a consensus. Vale a pena ter?
    // public BigInteger balanceOf(Address account) {
    //     String encodedAccount = ContractUtils.padAddressTo256Bit(account.toHexString());
        
    //     executor.callData(Bytes.fromHexString(METHOD_SIGNATURES.get("balanceOf") + encodedAccount));
    //     executor.execute();
        
    //     return ContractUtils.extractIntegerFromReturnData(output);
    // }



}
